# This script processes spatial transcriptomics data from fixed mouse pancreas TMAs generated using Visium HD slides.
# It loads per-TMA Seurat objects created from SpaceRanger output,
# integrates Loupe Browser annotations and sample metadata,
# performs normalization and dimensionality reduction,
# clusters spatial transcriptomic data using sketch-based methods,
# and visualizes spatial expression of endocrine cell markers.

# packages required for Visium HD
packages <- c("hdf5r", "arrow", "Seurat", "ggplot2", "patchwork", "dplyr")
for (pkg in packages) {
  if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
}
lapply(packages, library, character.only = TRUE)

# ---- Load metadata ----
metadata <- read.csv("/path/to/sample_metadata.csv", stringsAsFactors = FALSE)

tma_dirs <- c(
  "/path/to/TMA1/",
  "/path/to/TMA2/",
  "/path/to/TMA3/",
  "/path/to/TMA4/"
)

loupe_csvs <- c(
  "/path/to/TMA1_loupe.csv",
  "/path/to/TMA2_loupe.csv",
  "/path/to/TMA3_loupe.csv",
  "/path/to/TMA4_loupe.csv"
)

tma_names <- c("TMA1", "TMA2", "TMA3", "TMA4")

# ---- Function to load and annotate one TMA ----
load_and_annotate_TMA <- function(tma_dir, loupe_csv_path, tma_name, metadata) {
  object <- Load10X_Spatial(data.dir = tma_dir, bin.size = c(8, 16))
  
  # Add Loupe cluster annotation
  loupe_annot <- read.csv(loupe_csv_path)
  rownames(loupe_annot) <- loupe_annot$barcode
  common_barcodes <- intersect(Cells(object), rownames(loupe_annot))
  object$Loupe_Cluster <- NA
  object$Loupe_Cluster[common_barcodes] <- loupe_annot[common_barcodes, "cluster"]
  
  # Extract core_id from barcode prefix (before '-')
  object$core_id <- sapply(strsplit(Cells(object), "-"), `[`, 1)
  
  # Add metadata fields
  for (field in c("mouse_id", "genotype", "sex", "condition")) {
    object[[field]] <- metadata[match(object$core_id, metadata$core_id), field]
  }
  
  return(object)
}

analyze_TMA <- function(object, tma_name) {
  message("Analyzing ", tma_name)

  # ---- QC: Assay Check and Count Distribution ----
  print("Available assays:")
  print(Assays(object))

  DefaultAssay(object) <- "Spatial.008um"
  vln.plot <- VlnPlot(object, features = "nCount_Spatial.008um", pt.size = 0) +
    theme(axis.text = element_text(size = 8)) + NoLegend()
  count.plot <- SpatialFeaturePlot(object, features = "nCount_Spatial.008um") +
    theme(legend.position = "right")
  print(vln.plot | count.plot)

  # ---- Normalize 8um and 16um ----
  DefaultAssay(object) <- "Spatial.008um"
  object <- NormalizeData(object)

  DefaultAssay(object) <- "Spatial.016um"
  object <- NormalizeData(object)

  # ---- Marker Panel Visualization ----
  DefaultAssay(object) <- "Spatial.016um"
  print(SpatialFeaturePlot(object, features = c("Gcg", "Arx", "Ttr")) + ggtitle("Alpha Markers"))
  print(SpatialFeaturePlot(object, features = c("Ins1", "Pdx1", "Nkx6-1")) + ggtitle("Beta Markers"))
  print(SpatialFeaturePlot(object, features = c("Sst", "Hhex", "Rbp4")) + ggtitle("Delta Markers"))
  print(SpatialFeaturePlot(object, features = c("Ppy", "Pax6", "Chgb")) + ggtitle("PP Markers"))

  # ---- Sketched Clustering ----
  DefaultAssay(object) <- "Spatial.008um"
  object <- FindVariableFeatures(object)
  object <- ScaleData(object)
  object <- SketchData(object, ncells = 50000, method = "LeverageScore", sketched.assay = "sketch")

  DefaultAssay(object) <- "sketch"
  object <- FindVariableFeatures(object)
  object <- ScaleData(object)
  object <- RunPCA(object, reduction.name = "pca.sketch")
  object <- FindNeighbors(object, reduction = "pca.sketch", dims = 1:50)
  object <- FindClusters(object, resolution = 3, cluster.name = "seurat_cluster.sketched")
  object <- RunUMAP(object, reduction = "pca.sketch", reduction.name = "umap.sketch", dims = 1:50)

  # ---- Project onto Full Data ----
  object <- ProjectData(
    object = object,
    assay = "Spatial.008um",
    full.reduction = "full.pca.sketch",
    sketched.assay = "sketch",
    sketched.reduction = "pca.sketch",
    umap.model = "umap.sketch",
    dims = 1:50,
    refdata = list(seurat_cluster.projected = "seurat_cluster.sketched")
  )

  # ---- UMAP Plots ----
  DefaultAssay(object) <- "sketch"
  Idents(object) <- "seurat_cluster.sketched"
  p1 <- DimPlot(object, reduction = "umap.sketch") + ggtitle("Sketched clustering")

  DefaultAssay(object) <- "Spatial.008um"
  Idents(object) <- "seurat_cluster.projected"
  p2 <- DimPlot(object, reduction = "full.umap.sketch") + ggtitle("Projected clustering")

  print(p1 | p2)

  # ---- Spatial Clustering Plots ----
  print(SpatialDimPlot(object, label = TRUE, repel = TRUE, label.size = 4) +
          ggtitle(paste(tma_name, "- Spatial Clusters")))

  # ---- Highlight Endocrine Clusters (example: 0, 4, 32, 34, 35) ----
  endocrine_clusters <- c(0, 4, 32, 34, 35)  # modify based on your real endocrine cluster IDs
  Idents(object) <- "seurat_cluster.projected"
  cells <- CellsByIdentities(object, idents = endocrine_clusters)

  p_highlight <- SpatialDimPlot(object,
                                cells.highlight = unlist(cells),
                                cols.highlight = c("#FFFF00", "grey50"),
                                facet.highlight = TRUE) + NoLegend()
  print(p_highlight)

  return(object)
}


# ---- Example: Run for TMA1 ----
i <- 1
tma_obj <- load_and_annotate_TMA(tma_dirs[i], loupe_csvs[i], tma_names[i], metadata)
tma_obj_processed <- analyze_TMA(tma_obj, tma_names[i])

# Optional: Save output
saveRDS(tma_obj_processed, paste0("processed_", tma_names[i], ".rds"))
