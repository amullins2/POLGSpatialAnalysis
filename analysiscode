# # 🧬 TMA Visium HD Processing Pipeline
# This notebook processes fixed mouse pancreas TMAs from Visium HD slides.
# It runs MicroarrayProcessor to extract core positions,
# uses spaceranger to generate spatial gene expression data,
# and visualizes endocrine gene expression across cores.

# ---
# ## 🔧 1. Setup paths and imports
import os
import subprocess
import json
from MicroarrayProcessor import run as micro_run
import scanpy as sc

# Define your project structure
project_dir = "/your/project/path"  # <-- EDIT THIS
fastq_dir = os.path.join(project_dir, "fastq")
image_dir = os.path.join(project_dir, "images")
micro_out = os.path.join(project_dir, "outputs", "microarray")
space_out = os.path.join(project_dir, "outputs", "spaceranger")
ref_path = os.path.join(project_dir, "reference", "refdata-gex-mm10-2020-A")

tmas = ["TMA1_HE", "TMA2_HE", "TMA3_HE", "TMA4_HE"]  # One image per TMA

os.makedirs(micro_out, exist_ok=True)
os.makedirs(space_out, exist_ok=True)

# ## 🧫 2. Run MicroarrayProcessor per TMA
def run_microarray(tma_name):
    image_path = os.path.join(image_dir, f"{tma_name}.jpg")
    json_path = os.path.join(micro_out, f"{tma_name}.json")
    if not os.path.exists(json_path):
        print(f"🔍 Running MicroarrayProcessor for {tma_name}...")
        micro_run.main(image_path, micro_out, tma_name, 4, 4, 0)
    else:
        print(f"✅ Already processed: {tma_name}")

for tma in tmas:
    run_microarray(tma)

# ## 🧬 3. Run spaceranger per TMA
def run_spaceranger(tma_name):
    sample_id = tma_name.replace("_HE", "")
    output_path = os.path.join(space_out, sample_id)
    if os.path.exists(os.path.join(output_path, "outs")):
        print(f"✅ Spaceranger already completed for {sample_id}")
        return

    cmd = f"""
    spaceranger count \\
      --id={sample_id} \\
      --transcriptome={ref_path} \\
      --fastqs={fastq_dir} \\
      --sample={sample_id} \\
      --image={os.path.join(image_dir, f"{tma_name}.jpg")} \\
      --loupe-alignment={os.path.join(micro_out, f"{tma_name}.json")} \\
      --slide=UNUSED \\
      --area=A1 \\
      --localcores=16 \\
      --localmem=64
    """
    subprocess.run(cmd, shell=True, cwd=space_out)

for tma in tmas:
    run_spaceranger(tma)

# ## 🧬 4. List extracted cores from the alignment .json
def list_cores(tma_name):
    json_path = os.path.join(micro_out, f"{tma_name}.json")
    if not os.path.exists(json_path):
        print(f"❌ Missing: {json_path}")
        return
    with open(json_path, 'r') as f:
        data = json.load(f)
    print(f"🧩 Cores in {tma_name}:")
    for feature in data['features']:
        print(f"  - {feature['properties']['name']}")

for tma in tmas:
    list_cores(tma)

# ## 🧠 5. Load spatial data and analyze endocrine genes for one TMA
sample_id = "TMA1"  # <- choose one TMA at a time
adata = sc.read_visium(os.path.join(space_out, sample_id, "outs"))
adata.var_names_make_unique()

# Subset for key endocrine genes
endocrine_genes = ["Ins1", "Ins2", "Gcg", "Sst", "Ppy"]
found_genes = [g for g in endocrine_genes if g in adata.var_names]
print(f"✅ Found {len(found_genes)} of {len(endocrine_genes)} genes.")


# ## 🎻 6. Plot expression and run PCA/UMAP
sc.pl.spatial(adata, color=found_genes, cmap="magma", size=1.3)

# Normalization & dimensionality reduction
sc.pp.normalize_total(adata, target_sum=1e4)
sc.pp.log1p(adata)
sc.pp.highly_variable_genes(adata, flavor="seurat", n_top_genes=2000)
adata = adata[:, adata.var.highly_variable]
sc.pp.scale(adata)
sc.tl.pca(adata)
sc.pl.pca(adata, color=found_genes)

sc.pp.neighbors(adata)
sc.tl.umap(adata)
sc.pl.umap(adata, color=found_genes)
